/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminCustomImport } from './routes/admin.custom'
import { Route as AdminSplatImport } from './routes/admin.$'

// Create/Update Routes

const AdminCustomRoute = AdminCustomImport.update({
  id: '/admin/custom',
  path: '/admin/custom',
  getParentRoute: () => rootRoute,
} as any)

const AdminSplatRoute = AdminSplatImport.update({
  id: '/admin/$',
  path: '/admin/$',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin/$': {
      id: '/admin/$'
      path: '/admin/$'
      fullPath: '/admin/$'
      preLoaderRoute: typeof AdminSplatImport
      parentRoute: typeof rootRoute
    }
    '/admin/custom': {
      id: '/admin/custom'
      path: '/admin/custom'
      fullPath: '/admin/custom'
      preLoaderRoute: typeof AdminCustomImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/admin/$': typeof AdminSplatRoute
  '/admin/custom': typeof AdminCustomRoute
}

export interface FileRoutesByTo {
  '/admin/$': typeof AdminSplatRoute
  '/admin/custom': typeof AdminCustomRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/admin/$': typeof AdminSplatRoute
  '/admin/custom': typeof AdminCustomRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/admin/$' | '/admin/custom'
  fileRoutesByTo: FileRoutesByTo
  to: '/admin/$' | '/admin/custom'
  id: '__root__' | '/admin/$' | '/admin/custom'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AdminSplatRoute: typeof AdminSplatRoute
  AdminCustomRoute: typeof AdminCustomRoute
}

const rootRouteChildren: RootRouteChildren = {
  AdminSplatRoute: AdminSplatRoute,
  AdminCustomRoute: AdminCustomRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/admin/$",
        "/admin/custom"
      ]
    },
    "/admin/$": {
      "filePath": "admin.$.tsx"
    },
    "/admin/custom": {
      "filePath": "admin.custom.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
